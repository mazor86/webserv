------WebKitFormBoundaryBZwwcxEw899kiqppContent-Disposition: form-data; name="f"; filename="text3.txt"Content-Type: text/plainKlyne, et. al.              Standards Track                     [Page 4]RFC 3339       Date and Time on the Internet: Timestamps       July 20024.2. Local Offsets   The offset between local time and UTC is often useful information.   For example, in electronic mail (RFC2822, [IMAIL-UPDATE]) the local   offset provides a useful heuristic to determine the probability of a   prompt response.  Attempts to label local offsets with alphabetic   strings have resulted in poor interoperability in the past [IMAIL],   [HOST-REQ].  As a result, RFC2822 [IMAIL-UPDATE] has made numeric   offsets mandatory.   Numeric offsets are calculated as "local time minus UTC".  So the   equivalent time in UTC can be determined by subtracting the offset   from the local time.  For example, 18:50:00-04:00 is the same time as   22:50:00Z.  (This example shows negative offsets handled by ad------WebKitFormBoundaryBZwwcxEw899kiqppContent-Disposition: form-data; name="f"; filename="text3.txt"Content-Type: text/plainKlyne, et. al.              Standards Track                     [Page 4]RFC 3339       Date and Time on the Internet: Timestamps       July 20024.2. Local Offsets   The offset between local time and UTC is often useful information.   For example, in electronic mail (RFC2822, [IMAIL-UPDATE]) the local   offset provides a useful heuristic to determine the probability of a   prompt response.  Attempts to label local offsets with alphabetic   strings have resulted in poor interoperability in the past [IMAIL],   [HOST-REQ].  As a result, RFC2822 [IMAIL-UPDATE] has made numeric   offsets mandatory.   Numeric offsets are calculated as "local time minus UTC".  So the   equivalent time in UTC can be determined by subtracting the offset   from the local time.  For example, 18:50:00-04:00 is the same time as   22:50:00Z.  (This example shows negative offsets handled by adding   the absolute value of the offset.)      NOTE: Following ISO 8601, numeric offsets represent only time      zones that differ from UTC by an integral number of minutes.      However, many historical time zones differ from UTC by a non-      integral number of minutes.  To represent such historical time      stamps exactly, applications must convert them to a representable      time zone.4.3. Unknown Local Offset Convention   If the time in UTC is known, but the offset to local time is unknown,   this can be represented with an offset of "-00:00".  This differs   semantically from an offset of "Z" or "+00:00", which imply that UTC   is the preferred reference point for the specified time.  RFC2822   [IMAIL-UPDATE] describes a similar convention for email.4.4. Unqualified Local Time   A number of devices currently connected to the Internet run their   internal clocks in local time and are unaware of UTC.  While the   Internet does have a tradition of accepting reality when creating ------WebKitFormBoundaryBZwwcxEw899kiqppContent-Disposition: form-data; name="f"; filename="text3.txt"Content-Type: text/plainKlyne, et. al.              Standards Track                     [Page 4]RFC 3339       Date and Time on the Internet: Timestamps       July 20024.2. Local Offsets   The offset between local time and UTC is often useful information.   For example, in electronic mail (RFC2822, [IMAIL-UPDATE]) the local   offset provides a useful heuristic to determine the probability of a   prompt response.  Attempts to label local offsets with alphabetic   strings have resulted in poor interoperability in the past [IMAIL],   [HOST-REQ].  As a result, RFC2822 [IMAIL-UPDATE] has made numeric   offsets mandatory.   Numeric offsets are calculated as "local time minus UTC".  So the   equivalent time in UTC can be determined by subtracting the offset   from the local time.  For example, 18:50:00-04:00 is the same time as   22:50:00Z.  (This example shows negative offsets handled by adding   the absolute value of the offset.)      NOTE: Following ISO 8601, numeric offsets represent only time      zones that differ from UTC by an integral number of minutes.      However, many historical time zones differ from UTC by a non-      integral number of minutes.  To represent such historical time      stamps exactly, applications must convert them to a representable      time zone.4.3. Unknown Local Offset Convention   If the time in UTC is known, but the offset to local time is unknown,   this can be represented with an offset of "-00:00".  This differs   semantically from an offset of "Z" or "+00:00", which imply that UTC   is the preferred reference point for the specified time.  RFC2822   [IMAIL-UPDATE] describes a similar convention for email.4.4. Unqualified Local Time   A number of devices currently connected to the Internet run their   internal clocks in local time and are unaware of UTC.  While the   Internet does have a tradition of accepting reality when creating   specifications, this should not be done at the expense of   interoperability.  Since interpretation of an unqualified local time   zone will fail in approximately 23/24 of the globe, the   interoperability problems of unqualified local time are deemed   unacceptable for the Internet.  Systems that are configured with a   local time, are unaware of the corresponding UTC offset, and depend   on time synchronization with other Internet systems, MUST use a   mechanism that ensures correct synchronization with UTC.  Some   suitable mechanisms are:   o  Use Network Time Protocol [NTP] to obtain the time in UTC.Klyne, et. al.              Standards Track                     [Page 5]RFC 3339       Date and Time on the Internet: Timestamps       July 2002   o  Use another host in the same local time zone as a gateway to the      Internet.  This host MUST correct unqualified local times that are      transmitted to other hosts.   o  Prompt the user for the local time zone and daylight saving rule------WebKitFormBoundaryBZwwcxEw899kiqppContent-Disposition: form-data; name="f"; filename="text3.txt"Content-Type: text/plainKlyne, et. al.              Standards Track                     [Page 4]RFC 3339       Date and Time on the Internet: Timestamps       July 20024.2. Local Offsets   The offset between local time and UTC is often useful information.   For example, in electronic mail (RFC2822, [IMAIL-UPDATE]) the local   offset provides a useful heuristic to determine the probability of a   prompt response.  Attempts to label local offsets with alphabetic   strings have resulted in poor interoperability in the past [IMAIL],   [HOST-REQ].  As a result, RFC2822 [IMAIL-UPDATE] has made numeric   offsets mandatory.   Numeric offsets are calculated as "local time minus UTC".  So the   equivalent time in UTC can be determined by subtracting the offset   from the local time.  For example, 18:50:00-04:00 is the same time as   22:50:00Z.  (This example shows negative offsets handled by adding   the absolute value of the offset.)      NOTE: Following ISO 8601, numeric offsets represent only time      zones that differ from UTC by an integral number of minutes.      However, many historical time zones differ from UTC by a non-      integral number of minutes.  To represent such historical time      stamps exactly, applications must convert them to a representable      time zone.4.3. Unknown Local Offset Convention   If the time in UTC is known, but the offset to local time is unknown,   this can be represented with an offset of "-00:00".  This differs   semantically from an offset of "Z" or "+00:00", which imply that UTC   is the preferred reference point for the specified time.  RFC2822   [IMAIL-UPDATE] describes a similar convention for email.4.4. Unqualified Local Time   A number of devices currently connected to the Internet run their   internal clocks in local time and are unaware of UTC.  While the   Internet does have a tradition of accepting reality when creating   specifications, this should not be done at the expense of   interoperability.  Since interpretation of an unqualified local time   zone will fail in approximately 23/24 of the globe, the   interoperability problems of unqualified local time are deemed   unacceptable for the Internet.  Systems that are configured with a   local time, are unaware of the corresponding UTC offset, and depend   on time synchronization with other Internet systems, MUST use a   mechanism that ensures correct synchronization with UTC.  Some   suitable mechanisms are:   o  Use Network Time Protocol [NTP] to obtain the time in UTC.Klyne, et. al.              Standards Track                     [Page 5]RFC 3339       Date and Time on the Internet: Timestamps       July 2002   o  Use another host in the same local time zone as a gateway to the      Internet.  This host MUST correct unqualified local times that are      transmitted to other hosts.   o  Prompt the user for the local time zone and daylight saving rule      settings.5. Date and Time format   This section discusses desirable qualities of date and time formats   and defines a profile of ISO 8601 for use in Internet protocols.5.1. Ordering   If date and time components are ordered from least precise to most   precise, then a useful property is achieved.  Assuming that the time   zones of the dates and times are the same (e.g., all in UTC),   expressed using the same string (e.g., all "Z" or all "+00:00"), and   all times have the same number of fractional second digits, then the   date and time strings may be sorted as strings (e.g., using the   strcmp() function in C) and a time-ordered sequence will result.  The   presence of optional punctuation would violate this characteristic.5.2. Human Readability   Human readability has proved to be a valuable feature of Internet   protocols.  Human readable protocols greatly reduce the costs of   debugging since telnet often suffices as a test client and network   analyzers need not be modifie------WebKitFormBoundaryBZwwcxEw899kiqppContent-Disposition: form-data; name="f"; filename="text3.txt"Content-Type: text/plainKlyne, et. al.              Standards Track                     [Page 4]RFC 3339       Date and Time on the Internet: Timestamps       July 20024.2. Local Offsets   The offset between local time and UTC is often useful information.   For example, in electronic mail (RFC2822, [IMAIL-UPDATE]) the local   offset provides a useful heuristic to determine the probability of a   prompt response.  Attempts to label local offsets with alphabetic   strings have resulted in poor interoperability in the past [IMAIL],   [HOST-REQ].  As a result, RFC2822 [IMAIL-UPDATE] has made numeric   offsets mandatory.   Numeric offsets are calculated as "local time minus UTC".  So the   equivalent time in UTC can be determined by subtracting the offset   from the local time.  For example, 18:50:00-04:00 is the same time as   22:50:00Z.  (This example shows negative offsets handled by adding   the absolute value of the offset.)      NOTE: Following ISO 8601, numeric offsets represent only time      zones that differ from UTC by an integral number of minutes.      However, many historical time zones differ from UTC by a non-      integral number of minutes.  To represent such historical time      stamps exactly, applications must convert them to a representable      time zone.4.3. Unknown Local Offset Convention   If the time in UTC is known, but the offset to local time is unknown,   this can be represented with an offset of "-00:00".  This differs   semantically from an offset of "Z" or "+00:00", which imply that UTC   is the preferred reference point for the specified time.  RFC2822   [IMAIL-UPDATE] describes a similar convention for email.4.4. Unqualified Local Time   A number of devices currently connected to the Internet run their   internal clocks in local time and are unaware of UTC.  While the   Internet does have a tradition of accepting reality when creating   specifications, this should not be done at the expense of   interoperability.  Since interpretation of an unqualified local time   zone will fail in approximately 23/24 of the globe, the   interoperability problems of unqualified local time are deemed   unacceptable for the Internet.  Systems that are configured with a   local time, are unaware of the corresponding UTC offset, and depend   on time synchronization with other Internet systems, MUST use a   mechanism that ensures correct synchronization with UTC.  Some   suitable mechanisms are:   o  Use Network Time Protocol [NTP] to obtain the time in UTC.Klyne, et. al.              Standards Track                     [Page 5]RFC 3339       Date and Time on the Internet: Timestamps       July 2002   o  Use another host in the same local time zone as a gateway to the      Internet.  This host MUST correct unqualified local times that are      transmitted to other hosts.   o  Prompt the user for the local time zone and daylight saving rule      settings.5. Date and Time format   This section discusses desirable qualities of date and time formats   and defines a profile of ISO 8601 for use in Internet protocols.5.1. Ordering   If date and time components are ordered from least precise to most   precise, then a useful property is achieved.  Assuming that the time   zones of the dates and times are the same (e.g., all in UTC),   expressed using the same string (e.g., all "Z" or all "+00:00"), and   all times have the same number of fractional second digits, then the   date and time strings may be sorted as strings (e.g., using the   strcmp() function in C) and a time-ordered sequence will result.  The   presence of optional punctuation would violate this characteristic.5.2. Human Readability   Human readability has proved to be a valuable feature of Internet   protocols.  Human readable protocols greatly reduce the costs of   debugging since telnet often suffices as a test client and network   analyzers need not be modified with knowledge of the protocol.  On   the other hand, human readability sometimes results in   interoperability problems.  For example, the date format "10/11/1996"   is completely unsuitable for global interchange because it is   interpreted differently in different countries.  In addition, the   date format in [IMAIL] has resulted in interoperability problems when   people assumed any text string was permitted and translated the three   letter abbreviations to other languages or substituted date formats   which were easier to generate (e.g. the format used by the C function   ctime).  For this reason, a balance must be struck between human   readability and interoperability.   Because no date and time format is readable according to the   conventions of all countries, Internet clients SHOULD be prepared to   transform dates into a display format suitable for the locality.   This may include translating UTC to local time.------WebKitFormBoundaryBZwwcxEw899kiqpp--